version: 2

jobs:
  lint:
    docker:
    - image: node:latest
    steps:
    - checkout
    - run: npm install -g eslint
    - run:
        name: Install Dependencies
        command: yarn install
    - run:
        name: Run Lint
        command: npm run lint

  test:
    docker:
      - image: debian:stable
    steps:
      - checkout
      - run: apt-get update
      - run: apt-get install -y curl
      - run: curl -sL https://deb.nodesource.com/setup_10.x | bash -
      - run: apt-get install nodejs -y
      - run: npm install -g mocha
      - run:
          name: Install Dependencies
          command: npm install
      - run: curl https://www.mongodb.org/static/pgp/server-4.0.asc | apt-key add -
      - run: echo "deb http://repo.mongodb.org/apt/debian stretch/mongodb-org/4.0 main" >> /etc/apt/sources.list.d/mongodb-org-4.0.list
      - run: apt-get update
      - run: apt-get install -y mongodb
      - run: service mongodb start
      - run:
          name: Run tests
          command: npm test

    # Run coverage report for Code Climate

      - run:
          name: Setup Code Climate test-reporter
          command: |
            # download test reporter as a static binary
            curl -L https://codeclimate.com/downloads/test-reporter/test-reporter-latest-linux-amd64 > ./cc-test-reporter
            chmod +x ./cc-test-reporter
            ./cc-test-reporter before-build
          when: always

      - run:
          name: code-coverage
          command: |
            mkdir coverage
            # nyc report requires that nyc has already been run,
            # which creates the .nyc_output folder containing necessary data
            ./node_modules/.bin/nyc report --reporter=text-lcov > coverage/lcov.info
            ./cc-test-reporter after-build -t lcov
          when: always

    - store_test_results:
        path: reports
        - store_artifacts:
            path: ./reports/mocha/test-results.xml

        - store_artifacts:
            path: ./reports/eslint/eslint.xml

        - store_artifacts: # upload test coverage as artifact
            path: ./coverage/lcov.info
            prefix: tests

  deploy:
    machine:
      enabled: true
    steps:
      - run:
          name: Deploy to dirdapi.chaz.pro
          command: |
            ssh $SSH_USER@$SSH_HOST "~/deploy/dirdapi.sh"


workflows:
  version: 2
  build_and_test:
    jobs:
    - lint
    - test
    - deploy:
        requires:
          - test
        filters:
          branches:
            only: master

